/* MiniJavaParser.java */
/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
    package parser;
    import chap4.syntaxtree.*;
    public class MiniJavaParser implements MiniJavaParserConstants {

// The following is a simple grammar that will allow you
// to test the generated lexer.
  static final public 
Program Program() throws ParseException {MainClass m; ClassDeclList cl=new ClassDeclList(); ClassDecl c;
    m = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = ClassDecl();
cl.addElement(c);
    }
{if ("" != null) return new Program(m,cl);}
    throw new Error("Missing return statement in function");
}

  static final public MainClass MainClass() throws ParseException {Token n; Token arg; Statement s;
    jj_consume_token(CLASS);
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACK);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRINGTYPE);
    jj_consume_token(LSQUARE);
    jj_consume_token(RSQUARE);
    arg = jj_consume_token(IDENTIFIER);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACK);
    s = Statement();
    jj_consume_token(RBRACK);
    jj_consume_token(RBRACK);
{if ("" != null) return new MainClass(new Identifier(n.image),new Identifier(arg.image),s);}
    throw new Error("Missing return statement in function");
}

  static final public ClassDecl ClassDecl() throws ParseException {Token n; Token e; VarDeclList vl = new VarDeclList(); VarDecl v;
  MethodDeclList ml = new MethodDeclList(); MethodDecl m;
    if (jj_2_1(3)) {
      jj_consume_token(CLASS);
      n = jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACK);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTTYPE:
        case BOOLEANTYPE:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        v = VarDecl();
vl.addElement(v);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        m = MethodDecl();
ml.addElement(m);
      }
      jj_consume_token(RBRACK);
{if ("" != null) return new ClassDeclSimple(new Identifier(n.image),vl,ml);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:{
        jj_consume_token(CLASS);
        n = jj_consume_token(IDENTIFIER);
        jj_consume_token(EXTENDS);
        e = jj_consume_token(IDENTIFIER);
        jj_consume_token(LBRACK);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTTYPE:
          case BOOLEANTYPE:
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
          v = VarDecl();
vl.addElement(v);
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PUBLIC:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_5;
          }
          m = MethodDecl();
ml.addElement(m);
        }
        jj_consume_token(RBRACK);
{if ("" != null) return new ClassDeclExtends(new Identifier(n.image),new Identifier(e.image),vl,ml);}
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public VarDecl VarDecl() throws ParseException {Type t; Token n;
    t = Type();
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
{if ("" != null) return new VarDecl(t,new Identifier(n.image));}
    throw new Error("Missing return statement in function");
}

  static final public MethodDecl MethodDecl() throws ParseException {Type t; Token n; FormalList fl = new FormalList(); VarDeclList vl = new VarDeclList();
  VarDecl v; StatementList sl = new StatementList(); Statement s; Exp e;
    jj_consume_token(PUBLIC);
    t = Type();
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTTYPE:
    case BOOLEANTYPE:
    case IDENTIFIER:{
      fl = FormalList();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACK);
    label_6:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_6;
      }
      v = VarDecl();
vl.addElement(v);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case PRINT:
      case LBRACK:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      s = Statement();
sl.addElement(s);
    }
    jj_consume_token(RETURN);
    e = Expression();
    jj_consume_token(SEMICOLON);
    jj_consume_token(RBRACK);
{if ("" != null) return new MethodDecl(t,new Identifier(n.image),fl,vl,sl,e);}
    throw new Error("Missing return statement in function");
}

  static final public FormalList FormalList() throws ParseException {Type t; Token n; FormalList fl = new FormalList(); Formal f;
    t = Type();
    n = jj_consume_token(IDENTIFIER);
fl.addElement(new Formal(t,new Identifier(n.image)));
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      f = FormalRest();
fl.addElement(f);
    }
{if ("" != null) return fl;}
    throw new Error("Missing return statement in function");
}

  static final public Formal FormalRest() throws ParseException {Type t; Token n;
    jj_consume_token(COMMA);
    t = Type();
    n = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Formal(t,new Identifier(n.image));}
    throw new Error("Missing return statement in function");
}

  static final public Type Type() throws ParseException {Token c;
    if (jj_2_3(2)) {
      jj_consume_token(INTTYPE);
      jj_consume_token(LSQUARE);
      jj_consume_token(RSQUARE);
{if ("" != null) return new IntArrayType();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEANTYPE:{
        jj_consume_token(BOOLEANTYPE);
{if ("" != null) return new BooleanType();}
        break;
        }
      case INTTYPE:{
        jj_consume_token(INTTYPE);
{if ("" != null) return new IntegerType();}
        break;
        }
      case IDENTIFIER:{
        c = jj_consume_token(IDENTIFIER);
{if ("" != null) return new IdentifierType(c.image);}
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public Statement Statement() throws ParseException {StatementList sl = new StatementList(); Token i;
  Exp e1; Exp e2; Statement s1; Statement s2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACK:{
      jj_consume_token(LBRACK);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case PRINT:
        case LBRACK:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_9;
        }
        s1 = Statement();
sl.addElement(s1);
      }
      jj_consume_token(RBRACK);
{if ("" != null) return new Block(sl);}
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      e1 = Expression();
      jj_consume_token(RPAREN);
      s1 = Statement();
      jj_consume_token(ELSE);
      s2 = Statement();
{if ("" != null) return new If(e1,s1,s2);}
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      e1 = Expression();
      jj_consume_token(RPAREN);
      s1 = Statement();
{if ("" != null) return new While(e1,s1);}
      break;
      }
    case PRINT:{
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      e1 = Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
{if ("" != null) return new Print(e1);}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_4(2)) {
        i = jj_consume_token(IDENTIFIER);
        jj_consume_token(EQUAL);
        e1 = Expression();
        jj_consume_token(SEMICOLON);
{if ("" != null) return new Assign(new Identifier(i.image),e1);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          i = jj_consume_token(IDENTIFIER);
          jj_consume_token(LSQUARE);
          e1 = Expression();
          jj_consume_token(RSQUARE);
          jj_consume_token(EQUAL);
          e2 = Expression();
          jj_consume_token(SEMICOLON);
{if ("" != null) return new ArrayAssign(new Identifier(i.image),e1,e2);}
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

/*
void Expression():
{}
{
  Expression() <OP> Expression()
| Expression() <LSQUARE> Expression() <RSQUARE>
| Expression() <DOT> <LENGTH>
| Expression() <DOT> <IDENTIFIER> <LPAREN> ( ExpList() )? <RPAREN>
| <INTEGER_LITERAL>
| <TRUE>
| <FALSE>
| <IDENTIFIER>
| <THIS>
| LOOKAHEAD(2) <NEW> <INTTYPE> <LSQUARE> Expression() <RSQUARE>
| <NEW> <IDENTIFIER> <LPAREN> <RPAREN>
| <NOT> Expression()
| <LPAREN> Expression() <RPAREN>
}
 */
  static final public 
Exp Expression() throws ParseException {Exp e1, e2;
    e1 = ExpressionHead();
    e2 = ExpressionTail(e1);
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
}

  static final public Exp ExpressionHead() throws ParseException {Token n; Exp e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      n = jj_consume_token(INTEGER_LITERAL);
{if ("" != null) return new IntegerLiteral(Integer.parseInt(n.image));}
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return new True();}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return new False();}
      break;
      }
    case IDENTIFIER:{
      n = jj_consume_token(IDENTIFIER);
{if ("" != null) return new IdentifierExp(n.image);}
      break;
      }
    case THIS:{
      jj_consume_token(THIS);
{if ("" != null) return new This();}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_5(2)) {
        jj_consume_token(NEW);
        jj_consume_token(INTTYPE);
        jj_consume_token(LSQUARE);
        e = Expression();
        jj_consume_token(RSQUARE);
{if ("" != null) return new NewArray(e);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:{
          jj_consume_token(NEW);
          n = jj_consume_token(IDENTIFIER);
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
{if ("" != null) return new NewObject(new Identifier(n.image));}
          break;
          }
        case NOT:{
          jj_consume_token(NOT);
          e = Expression();
{if ("" != null) return new Not(e);}
          break;
          }
        case LPAREN:{
          jj_consume_token(LPAREN);
          e = Expression();
          jj_consume_token(RPAREN);
{if ("" != null) return e;}
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public Exp ExpressionTail(Exp h) throws ParseException {Exp e; ExpList el = new ExpList(); Token n;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ANDAND:{
      jj_consume_token(ANDAND);
      e = Expression();
{if ("" != null) return new And(h,e);}
      break;
      }
    case LT:{
      jj_consume_token(LT);
      e = Expression();
{if ("" != null) return new LessThan(h,e);}
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      e = Expression();
{if ("" != null) return new Plus(h,e);}
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      e = Expression();
{if ("" != null) return new Minus(h,e);}
      break;
      }
    case TIMES:{
      jj_consume_token(TIMES);
      e = Expression();
{if ("" != null) return new Times(h,e);}
      break;
      }
    case LSQUARE:{
      jj_consume_token(LSQUARE);
      e = Expression();
      jj_consume_token(RSQUARE);
{if ("" != null) return new ArrayLookup(h,e);}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      if (jj_2_6(2)) {
        jj_consume_token(DOT);
        jj_consume_token(LENGTH);
{if ("" != null) return new ArrayLength(h);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:{
          jj_consume_token(DOT);
          n = jj_consume_token(IDENTIFIER);
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:
          case FALSE:
          case NEW:
          case THIS:
          case LPAREN:
          case NOT:
          case IDENTIFIER:
          case INTEGER_LITERAL:{
            el = ExpList();
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
{if ("" != null) return new Call(h,new Identifier(n.image),el);}
          break;
          }
        default:
          jj_la1[17] = jj_gen;

{if ("" != null) return h;}
        }
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public ExpList ExpList() throws ParseException {ExpList el = new ExpList(); Exp e, er;
    e = Expression();
el.addElement(e);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_10;
      }
      er = ExpRest();
el.addElement(er);
    }
{if ("" != null) return el;}
    throw new Error("Missing return statement in function");
}

  static final public Exp ExpRest() throws ParseException {Exp e;
    jj_consume_token(COMMA);
    e = Expression();
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_VarDecl_99_3_11()) return true;
    return false;
  }

  static private boolean jj_3R_Type_131_3_15()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_Type_130_3_14()
 {
    if (jj_scan_token(INTTYPE)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  static private boolean jj_3R_Type_129_3_13()
 {
    if (jj_scan_token(BOOLEANTYPE)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(INTTYPE)) return true;
    if (jj_scan_token(LSQUARE)) return true;
    return false;
  }

  static private boolean jj_3R_Type_128_3_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_129_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_130_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_131_3_15()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_VarDecl_99_3_11()
 {
    if (jj_3R_Type_128_3_12()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INTTYPE)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x2,0x600,0x4,0x600,0x4,0x2,0x600,0x106800,0x8000000,0x600,0x106800,0x106800,0x0,0xb0000,0x40440000,0x404f0000,0x81000000,0x20000000,0x8000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x10,0x0,0x10,0x0,0x0,0x10,0x10,0x0,0x10,0x10,0x0,0x10,0x30,0x0,0x30,0xf,0x0,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MiniJavaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new MiniJavaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MiniJavaParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[42];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 19; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 42; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 6; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

                                 }
